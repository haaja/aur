From 0cf674ac09f5740a0bf5009dea57473fe59baa93 Mon Sep 17 00:00:00 2001
From: Kamil Prusko <kamilprusko@gmail.com>
Date: Sat, 21 Sep 2013 10:38:32 +0200
Subject: [PATCH] Support for gnome-shell 3.10

---
 README.md            |  3 ++-
 configure.ac         |  2 +-
 src/extension.js     | 62 +++++++++++++++++++++++++++++++++++++---------------
 src/metadata.json.in |  2 +-
 src/notification.js  |  2 --
 5 files changed, 48 insertions(+), 23 deletions(-)

diff --git a/README.md b/README.md
index 66f44d2..3282ecb 100644
--- a/README.md
+++ b/README.md
@@ -37,6 +37,7 @@ Available at [Maciej's](https://github.com/mgrela) overlay [here](https://github
 
 ## Direct from source
 1. Get zipball
+    * [for GNOME Shell 3.10](https://github.com/codito/gnome-shell-pomodoro/zipball/gnome-shell-3.10)
     * [for GNOME Shell 3.8](https://github.com/codito/gnome-shell-pomodoro/zipball/gnome-shell-3.8)
     * [for GNOME Shell 3.6](https://github.com/codito/gnome-shell-pomodoro/zipball/gnome-shell-3.6)
     * [for GNOME Shell 3.4](https://github.com/codito/gnome-shell-pomodoro/zipball/gnome-shell-3.4)
@@ -137,7 +138,7 @@ Thanks to our [GitHub contributors](https://github.com/codito/gnome-shell-pomodo
 
 **Version 0.8**
 
-+ Support for GNOME Shell 3.8 (thanks @haaja)
++ Support for GNOME Shell 3.8 and 3.10 (thanks @haaja)
 + Brazilian Portuguese translation (thanks @aleborba)
 + Minor bug fixes
 
diff --git a/configure.ac b/configure.ac
index 84ea0e8..b5c7d14 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,5 +1,5 @@
 AC_PREREQ(2.63)
-AC_INIT([gnome-shell-pomodoro],[0.8],[https://github.com/codito/gnome-shell-pomodoro])
+AC_INIT([gnome-shell-pomodoro],[0.8.1],[https://github.com/codito/gnome-shell-pomodoro])
 
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_AUX_DIR([config])
diff --git a/src/extension.js b/src/extension.js
index 5ed5270..3f41109 100644
--- a/src/extension.js
+++ b/src/extension.js
@@ -16,6 +16,7 @@
 
 const Lang = imports.lang;
 
+const Clutter = imports.gi.Clutter;
 const Gio = imports.gi.Gio;
 const Meta = imports.gi.Meta;
 const Pango = imports.gi.Pango;
@@ -25,6 +26,7 @@ const St = imports.gi.St;
 const Main = imports.ui.main;
 const PanelMenu = imports.ui.panelMenu;
 const PopupMenu = imports.ui.popupMenu;
+const Slider = imports.ui.slider;
 const Tweener = imports.ui.tweener;
 
 const Extension = imports.misc.extensionUtils.getCurrentExtension();
@@ -75,9 +77,15 @@ const Indicator = new Lang.Class({
         this._settings = PomodoroUtil.getSettings();
         this._settings.connect('changed', Lang.bind(this, this._onSettingsChanged));
         
+        this.menu.connect('get-prefered-width', Lang.bind(this, function(actor, for_height, allocation) {
+            let [min_size, natural_size] = actor.get_prefered_width(for_height);
+            alloc.min_size = Math.max(min_size, 250);
+            alloc.natural_size = Math.max(min_size, natural_size);
+        }));
         
         // Timer label
-        this.label = new St.Label({ style_class: 'extension-pomodoro-label' });
+        this.label = new St.Label({ style_class: 'extension-pomodoro-label',
+                                    y_align: Clutter.ActorAlign.CENTER });
         this.label.clutter_text.set_line_wrap(false);
         this.label.clutter_text.set_ellipsize(Pango.EllipsizeMode.NONE);
         
@@ -121,6 +129,9 @@ const Indicator = new Lang.Class({
     },
 
     _buildOptionsMenu: function() {
+        var item;
+        var bin;
+
         // Reset counters
         this._resetCountButton =  new PopupMenu.PopupMenuItem(_("Reset Counts and Timer"));
         this._resetCountButton.connect('activate', Lang.bind(this, this._onReset));
@@ -155,22 +166,33 @@ const Indicator = new Lang.Class({
         this._optionsMenu.menu.addMenuItem(this._playSoundsToggle);
         
         // Pomodoro duration
-        this._pomodoroTimeTitle = new PopupMenu.PopupMenuItem(_("Pomodoro Duration"), { reactive: false });
+        item = new PopupMenu.PopupMenuItem(_("Pomodoro Duration"), { reactive: false });
         this._pomodoroTimeLabel = new St.Label({ text: '' });
-        this._pomodoroTimeSlider = new PopupMenu.PopupSliderMenuItem(0);
+        bin = new St.Bin({ x_align: St.Align.END });
+        bin.child = this._pomodoroTimeLabel;
+        item.actor.add(bin, { expand: true, x_align: St.Align.END });
+        this._optionsMenu.menu.addMenuItem(item);
+
+        item = new PopupMenu.PopupBaseMenuItem({ activate: false });
+        this._pomodoroTimeSlider = new Slider.Slider(0);
         this._pomodoroTimeSlider.connect('value-changed', Lang.bind(this, function(item) {
             this._pomodoroTimeLabel.set_text(_formatTime(_valueToSeconds(item.value)));
         }));
         this._pomodoroTimeSlider.connect('drag-end', Lang.bind(this, this._onPomodoroTimeChanged));
         this._pomodoroTimeSlider.actor.connect('scroll-event', Lang.bind(this, this._onPomodoroTimeChanged));
-        this._pomodoroTimeTitle.addActor(this._pomodoroTimeLabel, { align: St.Align.END });
-        this._optionsMenu.menu.addMenuItem(this._pomodoroTimeTitle);
-        this._optionsMenu.menu.addMenuItem(this._pomodoroTimeSlider);
-        
+        item.actor.add(this._pomodoroTimeSlider.actor, { expand: true });
+        this._optionsMenu.menu.addMenuItem(item);
+
         // Short pause duration
-        this._shortPauseTimeTitle = new PopupMenu.PopupMenuItem(_("Short Break Duration"), { reactive: false });
+        item = new PopupMenu.PopupMenuItem(_("Short Break Duration"), { reactive: false });
         this._shortPauseTimeLabel = new St.Label({ text: '' });
-        this._shortPauseTimeSlider = new PopupMenu.PopupSliderMenuItem(0);
+        bin = new St.Bin({ x_align: St.Align.END });
+        bin.child = this._shortPauseTimeLabel;
+        item.actor.add(bin, { expand: true, x_align: St.Align.END });
+        this._optionsMenu.menu.addMenuItem(item);
+
+        item = new PopupMenu.PopupBaseMenuItem({ activate: false });
+        this._shortPauseTimeSlider = new Slider.Slider(0);
         this._shortPauseTimeSlider.connect('value-changed', Lang.bind(this, function(item) {
             this._shortPauseTimeLabel.set_text(_formatTime(_valueToSeconds(item.value)));
             if (item.value > this._longPauseTimeValue) {
@@ -184,14 +206,19 @@ const Indicator = new Lang.Class({
         }));
         this._shortPauseTimeSlider.connect('drag-end', Lang.bind(this, this._onShortPauseTimeChanged));
         this._shortPauseTimeSlider.actor.connect('scroll-event', Lang.bind(this, this._onShortPauseTimeChanged));
-        this._shortPauseTimeTitle.addActor(this._shortPauseTimeLabel, { align: St.Align.END });
-        this._optionsMenu.menu.addMenuItem(this._shortPauseTimeTitle);
-        this._optionsMenu.menu.addMenuItem(this._shortPauseTimeSlider);
-        
+        item.actor.add(this._shortPauseTimeSlider.actor, { expand: true });
+        this._optionsMenu.menu.addMenuItem(item);
+
         // Long pause duration
-        this._longPauseTimeTitle = new PopupMenu.PopupMenuItem(_("Long Break Duration"), { reactive: false });
+        item = new PopupMenu.PopupMenuItem(_("Long Break Duration"), { reactive: false });
         this._longPauseTimeLabel = new St.Label({ text: '' });
-        this._longPauseTimeSlider = new PopupMenu.PopupSliderMenuItem(0);
+        bin = new St.Bin({ x_align: St.Align.END });
+        bin.child = this._longPauseTimeLabel;
+        item.actor.add(bin, { expand: true, x_align: St.Align.END });
+        this._optionsMenu.menu.addMenuItem(item);
+
+        item = new PopupMenu.PopupBaseMenuItem({ activate: false });
+        this._longPauseTimeSlider = new Slider.Slider(0);
         this._longPauseTimeSlider.connect('value-changed', Lang.bind(this, function(item) {
             this._longPauseTimeLabel.set_text(_formatTime(_valueToSeconds(item.value)));
             if (this._shortPauseTimeValue > item.value) {
@@ -205,9 +232,8 @@ const Indicator = new Lang.Class({
         }));
         this._longPauseTimeSlider.connect('drag-end', Lang.bind(this, this._onLongPauseTimeChanged));
         this._longPauseTimeSlider.actor.connect('scroll-event', Lang.bind(this, this._onLongPauseTimeChanged));
-        this._longPauseTimeTitle.addActor(this._longPauseTimeLabel, { align: St.Align.END });
-        this._optionsMenu.menu.addMenuItem(this._longPauseTimeTitle);
-        this._optionsMenu.menu.addMenuItem(this._longPauseTimeSlider);
+        item.actor.add(this._longPauseTimeSlider.actor, { expand: true });
+        this._optionsMenu.menu.addMenuItem(item);
     },
 
     _onSettingsChanged: function() {
diff --git a/src/metadata.json.in b/src/metadata.json.in
index 2a9dd97..2db6cc4 100644
--- a/src/metadata.json.in
+++ b/src/metadata.json.in
@@ -4,6 +4,6 @@
   "settings-schema": "@GSCHEMANAME@",
   "name": "Pomodoro",
   "description": "A simple pomodoro timer",
-  "shell-version": ["3.8", "3.7.92", "3.7.91"],
+  "shell-version": ["3.10", "3.9.92", "3.9.91", "3.9.90"],
   "url": "https://github.com/codito/gnome-shell-pomodoro"
 }
diff --git a/src/notification.js b/src/notification.js
index 7804f0a..50c40e3 100644
--- a/src/notification.js
+++ b/src/notification.js
@@ -176,8 +176,6 @@ const ModalDialog = new Lang.Class({
 
         return this._grabHelper.grab({
             actor: this._lightbox.actor,
-            modal: true,
-            grabFocus: true,
             onUngrab: Lang.bind(this, this._onUngrab)
         });
     },
-- 
1.8.4.1

